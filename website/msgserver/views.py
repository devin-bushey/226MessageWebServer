from django.shortcuts import render
from msgserver.models import Message
from django.http import HttpResponse

from django.urls import reverse_lazy
from django.views.generic.edit import CreateView, UpdateView

#from django.core import serializers

import json

# PURPOSE:
# Given a key, retrieve the associated message from the server
# 
# PRARAMETERS:
# key: an alphanumeric, 8 digit string
#
# RETURN:
# Returns an http response with either the given key's message or "no message"
#
def get_msg(request, key):
    message = Message.objects.filter(key = key)
    if (len(message) > 0):
        return HttpResponse(message)
    else:
        return HttpResponse("No message")
    
# PURPOSE:
# Create Message class that Django uses to display the create key and message fields where the user submits
# the respective data to the server. On a successful submission, the 'messages' view is displayed (where all
# of the messages are shown in json format)
# 
# PRARAMETERS:
# Django specific
#
# RETURN:
# None
#
# NOTE:
# HTML is auto generated by Django. Template is used under he templates folder
#
class MessageCreate(CreateView):
    model = Message
    fields = '__all__'
    success_url = reverse_lazy('messages')

# PURPOSE:
# Update Message class that Django uses to display a message field where the user submits
# a new message for the associated key. On a successful submission, the 'messages' view is displayed (where all
# of the messages are shown in json format)
# 
# PRARAMETERS:
# Django specific
#
# RETURN:
# None
#
# NOTE:
# HTML is auto generated by Django. Template is used under he templates folder
#
class MessageUpdate(UpdateView):
    model = Message
    fields = ['msg']
    success_url = reverse_lazy('messages')

# PURPOSE:
# JSON Message Encoder class that encodes the key and message into json format
# 
# PARAMETERS:
# Message: message object that includes the key and msg strings
#
# RETURN:
# JSON formatted key and message pair
#
class MessageEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Message):
            return { 'key' : obj.key, 'msg' : obj.msg }

        return json.JSONEncoder.default(self, obj)

# PURPOSE:
# Retrieves all Message objects and returns all Messages in json format, within a set of braces
# 
# PARAMETERS:
# None
#
# RETURN:
# Http response with all json formatted Key and Message pairs
#
def get_all_messages(request):
    messages = Message.objects.all()
    json_response = '{'
    for msg in messages:
        json_response += json.dumps(msg, cls=MessageEncoder)
    json_response += '}'
    #print("[TEST]", json_response)
    return HttpResponse(json_response) 





